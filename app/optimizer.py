import logging
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models import FinancialRecord
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

async def optimize_finances(user_id: int, db: AsyncSession):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã —Å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –ø–æ–º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""

    result = await db.execute(select(FinancialRecord).where(FinancialRecord.user_id == user_id))
    records = result.scalars().all()

    deposits = []
    loans = []

    for record in records:
        if record.end_date and record.start_date and record.end_date < record.start_date:
            logging.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è {record.type} '{record.bank_name}', –∑–∞–ø–∏—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            continue

        # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if record.interest_rate_changes:
            for change in record.interest_rate_changes:
                change_date = datetime.strptime(change["date"], "%Y-%m-%d")
                if change_date < datetime.utcnow():
                    record.interest_rate = change["rate"]

        if record.type == "deposit":
            deposits.append(record)
        elif record.type == "loan":
            loans.append(record)

    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {len(deposits)}, –∫—Ä–µ–¥–∏—Ç–æ–≤: {len(loans)}")
    # ‚úÖ üîÑ –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç
    for card in credit_cards:
        if card.available_balance and card.available_balance > 0:
            recommendations.append(
                f"üí≥ –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {card.available_balance:.2f} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç–µ '{card.bank_name}'. "
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫—Ä–µ–¥–∏—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤."
            )

        if card.grace_period_end_date and card.grace_period_end_date > datetime.utcnow():
            recommendations.append(
                f"‚åõ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ '{card.bank_name}' –≤ –≥—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥–µ –¥–æ {card.grace_period_end_date.strftime('%Y-%m-%d')}. "
                "–û–ø–ª–∞—Ç–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤–æ–≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã!"
            )

        # üè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if card.credit_limit and card.credit_limit > 0 and card.available_balance < card.credit_limit * 0.3:
            recommendations.append(
                f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ '{card.bank_name}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 70% –ª–∏–º–∏—Ç–∞. "
                "–≠—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥."
            )

        # üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
        if card.refinance_rate and card.refinance_rate < card.purchase_interest_rate:
            recommendations.append(
                f"üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã '{card.bank_name}' –Ω–∞ —Å—Ç–∞–≤–∫—É {card.refinance_rate:.2f}%, "
                f"—Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏ {card.purchase_interest_rate:.2f}%."
            )

    if not deposits or not loans:
        logging.info("‚ùå –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
        return {"recommendations": [], "monthly_report": []}

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –¥–µ–ø–æ–∑–∏—Ç
    best_deposit = max(deposits, key=lambda d: d.amount * (1 + d.interest_rate * ((d.end_date - d.start_date).days / 365)), default=None)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∫—Ä–µ–¥–∏—Ç
    worst_loan = max(loans, key=lambda l: l.amount * (1 + l.interest_rate * ((l.end_date - l.start_date).days / 365)), default=None)

    logging.info(f"üí∞ –õ—É—á—à–∏–π –¥–µ–ø–æ–∑–∏—Ç: {best_deposit}")
    logging.info(f"üí∏ –•—É–¥—à–∏–π –∫—Ä–µ–¥–∏—Ç: {worst_loan}")

    recommendations = []
    retrospective_analysis = []
    monthly_report = []

    if best_deposit and worst_loan:
        logging.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ...")

        retrospective_start = datetime.utcnow() - timedelta(days=365)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
        current_date = retrospective_start

        total_deposit_income = 0
        total_loan_overpayment = 0
        total_fees = 0
        total_penalties = 0

        while current_date <= datetime.utcnow():
            month = current_date.strftime("%Y-%m")
            
            # –î–æ—Ö–æ–¥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
            deposit_income = (best_deposit.amount * best_deposit.interest_rate) / 12
            total_deposit_income += deposit_income

            # –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É –∑–∞ –º–µ—Å—è—Ü
            loan_payment = (worst_loan.amount * worst_loan.interest_rate) / 12
            total_loan_overpayment += loan_payment

            # üí∞ –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤
            if best_deposit.fee:
                total_fees += best_deposit.fee / 12  # –ö–æ–º–∏—Å—Å–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü—ã

            if worst_loan.penalty:
                total_penalties += worst_loan.penalty / 12  # –®—Ç—Ä–∞—Ñ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –º–µ—Å—è—Ü—ã

            net_savings = deposit_income - loan_payment - (total_fees + total_penalties)

            monthly_report.append({
                "month": month,
                "deposit_income": round(deposit_income, 2),
                "loan_payment": round(loan_payment, 2),
                "fees": round(total_fees, 2),
                "penalties": round(total_penalties, 2),
                "net_savings": round(net_savings, 2)
            })

            current_date += timedelta(days=30)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É

        savings = total_deposit_income - total_loan_overpayment - total_fees - total_penalties

        logging.info(f"üìä –î–æ—Ö–æ–¥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞: {total_deposit_income:.2f}")
        logging.info(f"üìä –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {total_loan_overpayment:.2f}")
        logging.info(f"üí° –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (—É—á–∏—Ç—ã–≤–∞—è –∫–æ–º–∏—Å—Å–∏–∏ –∏ —à—Ç—Ä–∞—Ñ—ã): {savings:.2f}")

        retrospective_analysis.append({
            "past_deposit_income": round(total_deposit_income, 2),
            "past_loan_overpayment": round(total_loan_overpayment, 2),
            "total_fees": round(total_fees, 2),
            "total_penalties": round(total_penalties, 2),
            "potential_savings": round(savings, 2),
            "start_date": retrospective_start.strftime("%Y-%m-%d"),
            "end_date": datetime.utcnow().strftime("%Y-%m-%d")
        })

        if savings > 0:
            recommendations.append(f"‚úÖ –ó–∞–∫—Ä–æ–π—Ç–µ –∫—Ä–µ–¥–∏—Ç '{worst_loan.bank_name}' –∑–∞ —Å—á–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ '{best_deposit.bank_name}'. –≠–∫–æ–Ω–æ–º–∏—è: {savings:.2f}")
        else:
            logging.info("‚ö†Ô∏è –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ–≤—ã–≥–æ–¥–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ...")

            partial_payment = best_deposit.amount * 0.3  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 30% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            new_loan_amount = worst_loan.amount - partial_payment
            new_loan_cost = new_loan_amount * (1 + worst_loan.interest_rate * ((worst_loan.end_date - worst_loan.start_date).days / 365))
            partial_savings = total_loan_overpayment - new_loan_cost

            if partial_savings > 0:
                recommendations.append(f"üí≥ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ '{worst_loan.bank_name}' –Ω–∞ —Å—É–º–º—É {partial_payment:.2f}. –≠—Ç–æ —É–º–µ–Ω—å—à–∏—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—É –Ω–∞ {partial_savings:.2f}.")
            else:
                logging.info("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –Ω–µ –¥–∞–µ—Ç –≤—ã–≥–æ–¥—ã.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    for loan in loans:
        if loan.refinance_available:
            recommendations.append(f"üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ '{loan.bank_name}', —Ç–∞–∫ –∫–∞–∫ –±–∞–Ω–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è.")
    # üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    for record in records:
        month = datetime.utcnow().strftime("%Y-%m")
        loan_payment = (record.amount * record.interest_rate) / 12 if record.type == "loan" else 0
        deposit_income = (record.amount * record.interest_rate) / 12 if record.type == "deposit" else 0
        credit_card_fee = record.monthly_fee if record.type == "credit_card" else 0

        monthly_report.append({
            "month": month,
            "deposit_income": round(deposit_income, 2),
            "loan_payment": round(loan_payment, 2),
            "credit_card_fee": round(credit_card_fee, 2),
            "net_balance": round(deposit_income - loan_payment - credit_card_fee, 2)
        })

    # üìâ –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    total_loan_expenses = sum((loan.amount * loan.interest_rate) / 12 for loan in loans)
    total_income = sum(deposit.amount * deposit.interest_rate / 12 for deposit in deposits)
    debt_ratio = (total_loan_expenses / (total_income + 1)) * 100  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

    if debt_ratio > 40:
        recommendations.append(
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ {debt_ratio:.1f}%. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥."
        )

    logging.info(f"üì¢ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")

    return {
        "recommendations": recommendations,
        "retrospective_analysis": retrospective_analysis,
        "monthly_report
::contentReference[oaicite:0]{index=0}
 
