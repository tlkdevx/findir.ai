import logging
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models import FinancialRecord
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)


async def optimize_finances(user_id: int, db: AsyncSession):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã —Å —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –ø–æ–º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""

    result = await db.execute(select(FinancialRecord).where(FinancialRecord.user_id == user_id))
    records = result.scalars().all()

    deposits = []
    loans = []

    for record in records:
        if record.end_date and record.start_date and record.end_date < record.start_date:
            logging.warning(f"‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è {record.type} '{record.bank_name}', –∑–∞–ø–∏—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            continue

        if record.type == "deposit":
            deposits.append(record)
        elif record.type == "loan":
            loans.append(record)

    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {len(deposits)}, –∫—Ä–µ–¥–∏—Ç–æ–≤: {len(loans)}")

    if not deposits or not loans:
        logging.info("‚ùå –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
        return {"recommendations": [], "monthly_report": []}

    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –¥–µ–ø–æ–∑–∏—Ç
    best_deposit = max(deposits, key=lambda d: d.amount * (1 + d.interest_rate * ((d.end_date - d.start_date).days / 365)), default=None)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –∫—Ä–µ–¥–∏—Ç
    worst_loan = max(loans, key=lambda l: l.amount * (1 + l.interest_rate * ((l.end_date - l.start_date).days / 365)), default=None)

    logging.info(f"üí∞ –õ—É—á—à–∏–π –¥–µ–ø–æ–∑–∏—Ç: {best_deposit}")
    logging.info(f"üí∏ –•—É–¥—à–∏–π –∫—Ä–µ–¥–∏—Ç: {worst_loan}")

    recommendations = []
    retrospective_analysis = []
    monthly_report = []

    if best_deposit and worst_loan:
        logging.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ...")

        retrospective_start = datetime.utcnow() - timedelta(days=365)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
        current_date = retrospective_start

        total_deposit_income = 0
        total_loan_overpayment = 0

        while current_date <= datetime.utcnow():
            month = current_date.strftime("%Y-%m")
            
            # –î–æ—Ö–æ–¥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
            deposit_income = (best_deposit.amount * best_deposit.interest_rate) / 12
            total_deposit_income += deposit_income

            # –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É –∑–∞ –º–µ—Å—è—Ü
            loan_payment = (worst_loan.amount * worst_loan.interest_rate) / 12
            total_loan_overpayment += loan_payment

            monthly_report.append({
                "month": month,
                "deposit_income": round(deposit_income, 2),
                "loan_payment": round(loan_payment, 2),
                "net_savings": round(deposit_income - loan_payment, 2)
            })

            current_date += timedelta(days=30)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É

        savings = total_deposit_income - total_loan_overpayment

        logging.info(f"üìä –î–æ—Ö–æ–¥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞: {total_deposit_income:.2f}")
        logging.info(f"üìä –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: {total_loan_overpayment:.2f}")
        logging.info(f"üí° –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {savings:.2f}")

        retrospective_analysis.append({
            "past_deposit_income": round(total_deposit_income, 2),
            "past_loan_overpayment": round(total_loan_overpayment, 2),
            "potential_savings": round(savings, 2),
            "start_date": retrospective_start.strftime("%Y-%m-%d"),
            "end_date": datetime.utcnow().strftime("%Y-%m-%d")
        })

        if savings > 0:
            recommendations.append(f"‚úÖ –ó–∞–∫—Ä–æ–π—Ç–µ –∫—Ä–µ–¥–∏—Ç '{worst_loan.bank_name}' –∑–∞ —Å—á–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ '{best_deposit.bank_name}'. –≠–∫–æ–Ω–æ–º–∏—è: {savings:.2f}")
        else:
            logging.info("‚ö†Ô∏è –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ–≤—ã–≥–æ–¥–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ...")

            partial_payment = best_deposit.amount * 0.3  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 30% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ
            new_loan_amount = worst_loan.amount - partial_payment
            new_loan_cost = new_loan_amount * (1 + worst_loan.interest_rate * ((worst_loan.end_date - worst_loan.start_date).days / 365))
            partial_savings = total_loan_overpayment - new_loan_cost

            if partial_savings > 0:
                recommendations.append(f"üí≥ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ '{worst_loan.bank_name}' –Ω–∞ —Å—É–º–º—É {partial_payment:.2f}. –≠—Ç–æ —É–º–µ–Ω—å—à–∏—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—É –Ω–∞ {partial_savings:.2f}.")
            else:
                logging.info("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –Ω–µ –¥–∞–µ—Ç –≤—ã–≥–æ–¥—ã.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
    for loan in loans:
        if loan.refinance_available:
            recommendations.append(f"üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ '{loan.bank_name}', —Ç–∞–∫ –∫–∞–∫ –±–∞–Ω–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è.")

    logging.info(f"üì¢ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")

    return {
        "recommendations": recommendations,
        "retrospective_analysis": retrospective_analysis,
        "monthly_report": monthly_report
    }
